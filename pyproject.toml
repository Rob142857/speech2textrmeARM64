[build-system]
requires = ["setuptools>=69", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "whisper-arm64-npu"
version = "0.1.0"
description = "ARM64 Windows (Snapdragon X Elite) Whisper Large ONNX/QNN transcription to DOCX with native Rust tokenizer/mel"
readme = "README.md"
authors = [ { name = "Rob", email = "" } ]
license = { text = "Proprietary" }
requires-python = ">=3.11"
keywords = ["whisper", "onnx", "qnn", "arm64", "speech-to-text", "docx", "npu"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Operating System :: Microsoft :: Windows",
  "Topic :: Multimedia :: Sound/Audio :: Speech",
  "License :: Other/Proprietary License"
]

# Core runtime deps (minimal needed for ONNX + formatting path)
dependencies = [
  "numpy>=1.24",
  "onnx>=1.15.0",
  "onnxruntime-qnn>=1.22.0",
  "python-docx>=1.1.0",
  "ffmpeg-python>=0.2.0",
  "soundfile>=0.12.0",
  "transformers>=4.55.0",
  "sentencepiece>=0.2.0",
  "tqdm>=4.65.0",
  "colorama>=0.4.6"
]

[project.optional-dependencies]
# PyTorch fallback + original whisper implementation
pytorch = [
  "torch>=2.0.0",
  "torchaudio>=2.0.0",
  "openai-whisper>=20231117",
  "librosa>=0.10.0"
]
# Extra NLP formatting enhancements
nlp = ["nltk>=3.8.1", "regex>=2023.8.8"]
# Development tools
dev = [
  "pytest>=8.0.0",
  "mypy>=1.8.0",
  "ruff>=0.3.0",
  "black>=24.3.0",
  "types-setuptools"
]

[project.scripts]
whisper-arm64-transcribe = "transcribe:main"

[tool.setuptools]
py-modules = [
  "audio_processor",
  "document_generator",
  "gui",
  "transcribe",
  "whisper_npu",
  "windows_speech"
]

[tool.mypy]
python_version = "3.11"
strict = false
ignore_missing_imports = true

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100
select = ["E", "F", "I", "B"]

[tool.ruff.format]
quote-style = "double"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q"
python_files = ["test_*.py", "*_test.py"]
